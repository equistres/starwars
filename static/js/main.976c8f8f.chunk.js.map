{"version":3,"sources":["components/Navigation.js","containers/GetAditionalInfo.js","components/Character.js","containers/Getinfo.js","App.js","serviceWorker.js","index.js","images/logo.png"],"names":["Navigation","react_default","a","createElement","className","src","Logo","width","alt","GetAditionalinfo","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","data","_this2","fetch","value","then","response","json","setState","name","Component","Character","character","charId","url","split","slice","shift","charImg","concat","gender","height","mass","hair_color","skin_color","GetAditionalInfo","species","homeworld","Getinfo","informacion","style","maxWidth","results","map","item","components_Character","key","API_URL","App","updatePage","componentDidMount","handleClickNext","nextPage","next","handleClickPrev","previous","buttons","onClick","type","disabled","components_Navigation","containers_Getinfo","PureComponent","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister","module","exports","__webpack_require__","p"],"mappings":"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","file":"static/js/main.976c8f8f.chunk.js","sourcesContent":["import React from 'react';\r\nimport Logo from '../images/logo.png'\r\n\r\nfunction Navigation(){\r\n    return(\r\n        <nav className=\"navbar\">\r\n        <img src={Logo} width=\"50px\" alt=\"StarWars React App\"/>\r\n            <span className=\"text-white float-left\">Star Wars Characters</span>\r\n        </nav>\r\n    )\r\n}\r\n\r\nexport default Navigation\r\n\r\n\r\n\r\n","import React, { Component } from 'react';\r\n\r\nclass GetAditionalinfo extends Component {\r\n \r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      data: null\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    fetch(this.props.value)\r\n      .then(response => response.json())\r\n      .then(data => this.setState({ data }));\r\n  }\r\n\r\n  render(){\r\n      if(this.state.data===null){\r\n          return(\r\n            <span>-</span>\r\n          )\r\n      }else{\r\n        return(\r\n            <span>{this.state.data.name}</span>\r\n        )\r\n      }\r\n  }\r\n}\r\n\r\nexport default GetAditionalinfo;","import React from 'react';\r\nimport GetAditionalinfo from '../containers/GetAditionalInfo';\r\n\r\nfunction Character(character){\r\n    const charId = character.data.url.split(\"/\").slice(-2).shift()\r\n    const charImg = `https://starwars-visualguide.com/assets/img/characters/${charId}.jpg`\r\n return(\r\n    \r\n    <div className=\"card mx-auto mb-4\">\r\n        <img className=\"card-img-top\" src={charImg} alt={character.data.name}/>\r\n        <div className=\"card-body\">\r\n            <h5 className=\"card-title\">{character.data.name}</h5>\r\n            <p className=\"card-text\">Gender: {character.data.gender}</p>\r\n            <p className=\"card-text\">Height: {character.data.height}</p>\r\n            <p className=\"card-text\">Mass: {character.data.mass}</p>\r\n            <p className=\"card-text\">Hair Color: {character.data.hair_color}</p>\r\n            <p className=\"card-text\">Skin Color: {character.data.skin_color}</p>\r\n            <p className=\"card-text\">Race: <GetAditionalinfo value={character.data.species}/></p>\r\n            <p className=\"card-text\">Planet: <GetAditionalinfo value={character.data.homeworld}/></p>\r\n    </div>\r\n\r\n   </div>\r\n )\r\n}\r\n\r\nexport default Character","import React, { Component } from 'react';\r\nimport Character from '../components/Character';\r\n\r\nclass Getinfo extends Component {\r\n  render(){\r\n      const informacion = this.props.data;\r\n      \r\n      if(this.props.data===null){\r\n          return(\r\n              <h3 className=\"mx-auto\">Loading...</h3>\r\n          )\r\n      }else{\r\n        return(\r\n          <div className=\"container-fluid\" style={{maxWidth: '1900px'}}>\r\n            <div className=\"row\">\r\n            {\r\n              informacion.results.map((item) => {\r\n                return(\r\n                  <Character key={item.name} data={item}/>\r\n                )\r\n              })\r\n            }\r\n            </div>\r\n          </div>\r\n\r\n        )\r\n      }\r\n  }\r\n}\r\n\r\nexport default Getinfo;","import React, { PureComponent } from 'react';\r\n// import logo from './logo.svg';\r\nimport './App.css';\r\nimport Navigation from './components/Navigation';\r\nimport Getinfo from './containers/Getinfo';\r\n\r\n\r\nconst API_URL = 'https://swapi.co/api/people/';\r\n\r\nclass App extends PureComponent {\r\n  constructor(props) {\r\n    super(props);\r\n    \r\n    this.state = {\r\n      data: null,\r\n      nextPage: API_URL\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    fetch(this.state.nextPage)\r\n      .then(response => response.json())\r\n      .then(data => this.setState({ data })\r\n      );\r\n  }\r\n  updatePage = () =>{\r\n    //ESTO NO SE SI ESTA BIEN????\r\n    //LLAMO PARA QUE SE VUELVA A MONTAR EL COMPONENTE LLAMANDO A LA NUEVA URL\r\n    this.componentDidMount();\r\n  }\r\n  handleClickNext = () => {\r\n    //SETEO EL ESTADO, PERO AL SER ASINCRONO, PONGO UN CALLBACK PARA EJECUTARSE LUEGO DE ESTAR ACTUALIZADO.\r\n    this.setState({ nextPage: this.state.data.next }, this.updatePage);\r\n  }\r\n  handleClickPrev = () => {\r\n    //SETEO EL ESTADO, PERO AL SER ASINCRONO, PONGO UN CALLBACK PARA EJECUTARSE LUEGO DE ESTAR ACTUALIZADO.\r\n    if(this.state.data.previous){\r\n      this.setState({ nextPage: this.state.data.previous }, this.updatePage);\r\n    }\r\n  }\r\n  render() {\r\n    let buttons;\r\n    if(this.state.data){\r\n      if(this.state.data.previous){ \r\n        buttons = <div className=\"d-flex justify-content-end\"><button onClick={this.handleClickPrev} type=\"button\" className=\"btn btn-primary\">Prev</button><button onClick={this.handleClickNext} type=\"button\" className=\"btn btn-primary\">Next</button></div>\r\n      }else{\r\n        buttons = <div className=\"d-flex justify-content-end\"><button type=\"button\" className=\"btn btn-primary\" disabled>Prev</button><button onClick={this.handleClickNext} type=\"button\" className=\"btn btn-primary\">Next</button></div>\r\n      }\r\n    }\r\n    return (\r\n      <div className=\"App\">\r\n        <header className=\"App-header\">\r\n        <Navigation />\r\n        {buttons}\r\n        <Getinfo data={this.state.data}/>\r\n        {buttons}\r\n        </header>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n","module.exports = __webpack_public_path__ + \"static/media/logo.eeecfb48.png\";"],"sourceRoot":""}